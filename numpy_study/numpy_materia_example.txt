实验名称：NumPy 基础使用教程（1）- 数值类型及多维数组
一、实验介绍
1.1 实验内容
如果你使用 Python 语言进行科学计算，那么一定会接触到 NumPy。NumPy 是支持 Python 语言的数值计算扩充库，其拥有强大的多维数组处理与矩阵运算能力。除此之外，NumPy 还内建了大量的函数，方便你快速构建数学模型。


##
1.2 实验知识点
NumPy 安装
NumPy 数值类型介绍
1.3 实验环境
Python3
Jupyter Notebook
1.4 适合人群
本课程难度为一般，属于初级级别课程，适合具有 Python 基础，并对使用 NumPy 进行科学计算感兴趣的用户。

二、NumPy 简介


NumPy 的英文全称为 Numerical Python，意味 Python 面向数值计算的第三方库。NumPy 的特点在于，针对 Python 内建的数组类型做了扩充，支持更高维度的数组和矩阵运算，以及更丰富的数学函数。

NumPy 是 Scipy.org 中最重要的库之一，它同时也被 Pandas，Matplotlib 等我们熟知的第三方库作为核心计算库。当你在单独安装这些库时，你会发现同时会安装 NumPy 作为依赖。

2.1 NumPy 安装
实验楼的在线环境中已经内置了 NumPy，无需手动安装。如果你需要在本地安装 NumPy。最方便地，就是通过 pip 来进行安装了。我们只需要打开终端，键入下面的命令就可以完成安装了。

sudo pip install numPy
Windows 用户只需要以管理员身份打开系统命令行工具，输入 pip install NumPy 即可。

当然，Ubuntu & Debian 用户还可以用 apt-get 安装：

sudo apt-get install python-numpy
2.2 NumPy 数值类型
安装完毕之后，我们先来了解 NumPy 支持的数据类型。Python 本身支持的数值类型有 int（整型，Python 2 中存在 long 长整型）、float（浮点型）、bool（布尔型） 和 complex（复数型）。

而 NumPy 支持比 Python 本身更为丰富的数值类型，细分如下：

bool：布尔类型，1 个字节，值为 True 或 False。
int：整数类型，通常为 int64 或 int32 。
intc：与 C 里的 int 相同，通常为 int32 或 int64。
intp：用于索引，通常为 int32 或 int64。
int8：字节（从 -128 到 127）
int16：整数（从 -32768 到 32767）
int32：整数（从 -2147483648 到 2147483647）
int64：整数（从 -9223372036854775808 到 9223372036854775807）
uint8：无符号整数（从 0 到 255）
uint16：无符号整数（从 0 到 65535）
uint32：无符号整数（从 0 到 4294967295）
uint64：无符号整数（从 0 到 18446744073709551615）
float：float64 的简写。
float16：半精度浮点，5 位指数，10 位尾数
float32：单精度浮点，8 位指数，23 位尾数
float64：双精度浮点，11 位指数，52 位尾数
complex：complex128 的简写。
complex64：复数，由两个 32 位浮点表示。
complex128：复数，由两个 64 位浮点表示。
在 NumPy 中，上面提到的这些数值类型都被归于 dtype（data-type） 对象的实例。 我们可以用 numpy.dtype(object, align, copy) 来指定数值类型。而在数组里面，可以用 dtype= 参数。

下面，我们就开始学习 NumPy，首先需要导入 NumPy。

☞ 示例代码：

import numpy as np # 导入 NumPy 模块

a = np.array([1.1, 2.2, 3.3], dtype=np.float64) # 指定 1 维数组的数值类型为 float64

a, a.dtype # 查看 a 及 dtype 类型
☞ 动手练习：

你可以使用 .astype() 方法在不同的数值类型之间相互转换。

☞ 示例代码：

a.astype(int).dtype # 将 a 的数值类型从 float64 转换为 int，并查看 dtype 类型
☞ 动手练习：

三、NumPy 多维数组
3.1 ndarray 介绍
在 python 内建对象中，数组有三种形式：

list 列表：[1, 2, 3]
Tuple 元组：(1, 2, 3, 4, 5)
Dict 字典：{A:1, B:2}
其中，元组与列表相似，不同之处在于元组的元素不能修改。而字典由键和值构成。 python 标准类针对数组的处理局限于 1 维，并仅提供少量的功能。

而 NumPy 最核心且最重要的一个特性就是 ndarray 多维数组对象，它区别于 Python 的标准类，拥有对高维数组的处理能力，这也是数值计算过程中缺一不可的重要特性。

NumPy 中，ndarray 类具有六个参数，它们分别为：

shape：数组的形状。
dtype：数据类型。
buffer：对象暴露缓冲区接口。
offset：数组数据的偏移量。
strides：数据步长。
order：{'C'，'F'}，以行或列为主排列顺序。
下面，我们来了解创建 ndarray 的一些方法。在 NumPy 中，我们主要通过以下 5 种途径创建数组，它们分别是：

从 Python 数组结构列表，元组等转换。
使用 np.arange、np.ones、np.zeros 等 NumPy 原生方法。
从存储空间读取数组。
通过使用字符串或缓冲区从原始字节创建数组。
使用特殊函数，如 random。
3.2 从列表或元组转换
在 NumPy 中，我们使用 numpy.array 将列表或元组转换为 ndarray 数组。其方法为：

numpy.array(object, dtype=None, copy=True, order=None, subok=False, ndmin=0)
其中，参数：

object：列表、元组等。
dtype：数据类型。如果未给出，则类型为被保存对象所需的最小类型。
copy：布尔类型，默认 True，表示复制对象。
order：顺序。
subok：布尔类型，表示子类是否被传递。
ndmin：生成的数组应具有的最小维数。
下面，通过列表创建一个 ndarray 数组。

☞ 示例代码：

np.array([[[1, 2, 3],[1, 2, 3],[1, 2, 3]],[[1, 2, 3],[1, 2, 3],[1, 2, 3]],[[1, 2, 3],[1, 2, 3],[1, 2, 3]]])
☞ 动手练习：

或者是列表和元组。

☞ 示例代码：

np.array([(1,2),(3,4),(5,6)])
☞ 动手练习：

3.3 arange 方法创建
除了直接使用 array 方法创建 ndarray，在 NumPy 中还有一些方法可以创建一些有规律性的多维数。首先，我们来看一看 arange()。arange() 的功能是在给定区间内创建一系列均匀间隔的值。方法如下：

numpy.arange(start, stop, step, dtype=None)
你需要先设置值所在的区间，这里为 [开始， 停止），你应该能发现这是一个半开半闭区间。然后，在设置 step 步长用于设置值之间的间隔。最后的可选参数 dtype可以设置返回ndarray 的值类型。

☞ 示例代码：

# 在区间 [3, 7) 中以 0.5 为步长新建数组
np.arange(3, 7, 0.5, dtype='float32')
3.4 linspace 方法创建
linspace方法也可以像arange方法一样，创建数值有规律的数组。linspace 用于在指定的区间内返回间隔均匀的值。其方法如下：

numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)
start：序列的起始值。
stop：序列的结束值。
num：生成的样本数。默认值为50。
endpoint：布尔值，如果为真，则最后一个样本包含在序列内。
retstep：布尔值，如果为真，返回间距。
dtype：数组的类型。
☞ 示例代码：

np.linspace(0, 10, 10, endpoint=True)
☞ 动手练习：

将 endpoint 参数改成 False 看看区别：

☞ 示例代码：

np.linspace(0, 10, 10, endpoint=False)
☞ 动手练习：

3.5 ones 方法创建
numpy.ones 用于快速创建数值全部为 1 的多维数组。其方法如下：

numpy.ones(shape, dtype=None, order='C')
其中：

shape：用于指定数组形状，例如（1， 2）或 3。
dtype：数据类型。
order：{'C'，'F'}，按行或列方式储存数组。
☞ 示例代码：

np.ones((2,3))
☞ 动手练习：

3.6 zeros 方法创建
zeros 方法和上面的 ones 方法非常相似，不同的地方在于，这里全部填充为 0。zeros 方法和 ones 是一致的。

numpy.zeros(shape, dtype=None, order='C')
其中：

shape：用于指定数组形状，例如（1， 2）或3。
dtype：数据类型。
order：{'C'，'F'}，按行或列方式储存数组。
☞ 示例代码：

np.zeros((3,2))
☞ 动手练习：

3.7 eye 方法创建
numpy.eye 用于创建一个二维数组，其特点是k 对角线上的值为 1，其余值全部为0。方法如下：

numpy.eye(N, M=None, k=0, dtype=<type 'float'>)
其中：

N：输出数组的行数。
M：输出数组的列数。
k：对角线索引：0（默认）是指主对角线，正值是指上对角线，负值是指下对角线。
☞ 示例代码：

np.eye(5, 4, 3)
☞ 动手练习：

3.8 从已知数据创建
我们还可以从已知数据文件、函数中创建 ndarray。NumPy 提供了下面 5 个方法：

frombuffer（buffer）：将缓冲区转换为 1 维数组。
fromfile（file，dtype，count，sep）：从文本或二进制文件中构建多维数组。
fromfunction（function，shape）：通过函数返回值来创建多维数组。
fromiter（iterable，dtype，count）：从可迭代对象创建 1 维数组。
fromstring（string，dtype，count，sep）：从字符串中创建 1 维数组。
☞ 示例代码：

np.fromfunction(lambda a, b: a + b, (5, 4))
☞ 动手练习：

四、ndarray 数组属性
首先，我们创建一个 ndarray 数组，首先，新建 b 并随意设定为一个 2 维数组。

☞ 示例代码：

b = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

b # 查看 b 的值
☞ 动手练习：

ndarray 多维数组支持下面这些属性：

4.1 ndarray.T
ndarray.T用于数组的转置，与 .transpose() 相同。

☞ 示例代码：

b.T
☞ 动手练习：

4.2 ndarray.dtype
ndarray.dtype 用来输出数组包含元素的数据类型。

☞ 示例代码：

b.dtype
☞ 动手练习：

4.3 ndarray.imag
ndarray.imag 用来输出数组包含元素的虚部。

☞ 示例代码：

b.imag
☞ 动手练习：

4.4ndarray.real
ndarray.real用来输出数组包含元素的实部。

☞ 示例代码：

b.real
☞ 动手练习：

4.5 ndarray.size
ndarray.size用来输出数组中的总包含元素数。

☞ 示例代码：

b.size
☞ 动手练习：

4.6ndarray.itemsize
ndarray.itemsize输出一个数组元素的字节数。

☞ 示例代码：

b.itemsize
☞ 动手练习：

4.7 ndarray.nbytes
ndarray.nbytes用来输出数组的元素总字节数。

☞ 示例代码：

b.nbytes
☞ 动手练习：

4.8 ndarray.ndim
ndarray.ndim用来输出数组尺寸。

☞ 示例代码：

b.ndim
☞ 动手练习：

4.9 ndarray.shape
ndarray.shape用来输出数组维数组.

☞ 示例代码：

b.shape
☞ 动手练习：

4.10 ndarray.strides
ndarray.strides用来遍历数组时，输出每个维度中步进的字节数组。

☞ 示例代码：

b.strides
☞ 动手练习：

五、实验总结
Ndarray 是 NumPy 的灵魂和核心，本章节介绍了 Ndarray 的生成或转换方法，这是了解并熟练使用 NumPy 的前提。

来源: 实验楼
链接: https://www.shiyanlou.com/courses/912
本课程内容，由作者授权实验楼发布，未经允许，禁止转载、下载及非法传播
